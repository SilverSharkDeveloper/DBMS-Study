DROP TABLE TBL_SUPERCAR ;

CREATE TABLE TBL_CAR(
	ID NUMBER,
	BRAND VARCHAR2(300),
	COLOR VARCHAR2(100),
	PRICE NUMBER(10),
	CONSTRAINT CAR_PK PRIMARY KEY(ID)
);

ALTER TABLE TBL_CAR MODIFY BRAND NOT NULL;

ALTER TABLE TBL_CAR DROP CONSTRAINT SYS_C007095;

SELECT * FROM PLAYER WHERE "POSITION" IS NULL;
SELECT * FROM PLAYER WHERE "POSITION" IS NOT NULL;

SELECT * FROM TBL_CAR ;

ALTER TABLE TBL_CAR MODIFY BRAND NOT NULL;
INSERT INTO TBL_CAR 
VALUES(001,'BNEZ','GREY',35000);

INSERT INTO TBL_CAR 
VALUES(002,'AUDI',NULL,3500);

SELECT * FROM PLAYER WHERE "POSITION" IS NULL;

SELECT NVL("POSITION",'미정')  FROM PLAYER WHERE "POSITION" IS NULL 

SELECT  NVL2("POSITION", '확정','미정') FROM PLAYER;

SELECT PLAYER_NAME , NVL2("NATION",'등록','미등록') FROM PLAYER;


--숫자형 함수
--ABS(절대값)
	SELECT  ABS(-10) FROM DUAL;
--양의정수(1), 영(0), 음의정수(-1) 판단 SIGN()
	SELECT SIGN(-234),SIGN(0), SIGN(124)FROM DUAL;
--나머지 연산 MOD()
	SELECT MOD(10,3) FROM DUAL;

--값보다 큰 최근접 정수(올림) CEIL() 값보다 작은 최근접 정수(내림) FLOOR()
 SELECT CEIL(3.14), CEIL(-3.14) FROM DUAL;
SELECT FLOOR(3.14), FLOOR(-3.14) FROM DUAL;


--반올림 ROUND()
SELECT ROUND(3.14123,2) FROM DUAL;

--버림 TRUNC()
	SELECT TRUNC(3.14) FROM DUAL;

SELECT ROUND(HEIGHT ,2)||'cm',TRUNC(WEIGHT)||'kg' FROM PLAYER;


SELECT ROUND(AVG(HEIGHT),2), MAX(HEIGHT),MIN(HEIGHT), SUM(HEIGHT),COUNT(HEIGHT) FROM PLAYER;

SELECT COUNT(NVL2(HEIGHT,1,0)) FROM PLAYER;

--------------------------------------------------------------------------------
--ORDER BY : 정렬
--ASC : 오름 ->기본값
--DESC : 내림
SELECT * FROM PLAYER ORDER BY HEIGHT DESC;
--ORDER BY 뒤에 컬럼의 순서를 작성해 정렬 가능
SELECT * FROM PLAYER ORDER BY 12;

SELECT HEIGHT, WEIGHT FROM PLAYER WHERE HEIGHT IS NOT NULL AND WEIGHT  IS NOT NULL ORDER BY HEIGHT,WEIGHT;
SELECT HEIGHT, WEIGHT FROM PLAYER ORDER BY 1,2;
--앞에 작성한 컬럼의 순으로 작성해 정렬 가능

--CASE END 문
--CASE WHEN THEN ELSE END
--CASE WHEN 조건식 THEN '값' ELSE '값' END

SELECT * FROM EMP;
SELECT CASE 
	WHEN SAL >=3000 THEN 'HIGH'
	WHEN SAL >=1000 THEN 'MID'
	ELSE 'LOW'
END 급여
FROM EMP;

SELECT CASE 
	WHEN SEAT_COUNT BETWEEN 0 AND 30000	THEN 'S'
	ELSE CASE 
		WHEN SEAT_COUNT BETWEEN 30001 AND 50000 THEN 'M'
		ELSE 'L'
	END
END 좌석
FROM STADIUM ;

SELECT CASE 
	WHEN WEIGHT BETWEEN 50 AND 70 THEN 'L'
	WHEN WEIGHT BETWEEN 71 AND 80 THEN 'M'
	WHEN WEIGHT IS NULL THEN '미등록'	
	ELSE 'H'
END
FROM PLAYER;


--GORUP BY : ~별 
--SELECT ?? FROM ?? 
--WHERE 조건식
--GROUP BY 컬럼명
--HAVING 조건식

SELECT "POSITION"  FROM PLAYER GROUP BY "POSITION" 
HAVING "POSITION" IS NOT NULL;

--WHERE절에서 조건을 처리할 수 있다면 반드시 WHERER절에서 먼저 처리해준다.
SELECT "POSITION" 
FROM PLAYER 
WHERE "POSITION" IS NOT NULL 
GROUP BY "POSITION" ;

SELECT "POSITION" ,AVG(HEIGHT) 
FROM PLAYER p 
WHERE WEIGHT >= 80
GROUP BY "POSITION" 
HAVING AVG(HEIGHT)>=180; 


--SUB QUERY
--FROM 절 : IN LINE VIEW
--SELECT 절 : SCALAR 
--WHERE 절 : SUB QUERY

--PLAYER 테이블에서 TEAM_ID 가 'K01'인 선수 중 POSITION이 'GK'인 선수
--1. ~~~중은 FROM절에서 전체 테이블을 검색하는것이 아닌 이미 전체 테이블에서 TEAM_ID 가 'K01'인 선수들 로 바꾼다.
SELECT * FROM 
(
SELECT * FROM PLAYER WHERE TEAM_ID = 'K01'
)
WHERE "POSITION" = 'GK';

--평균키보다 작은 선수들 구하기
--2.WHERE절에서 집계함수를 사용하고 싶을때
SELECT * FROM PLAYER 
WHERE HEIGHT > (SELECT AVG(HEIGHT) FROM PLAYER);
SELECT * FROM PLAYER;

--PLAYER 테이블에서 전체 평균키와 포지션별 평균 키 구하기
SELECT "POSITION",AVG(HEIGHT ),(SELECT AVG(HEIGHT) FROM PLAYER) FROM PLAYER
WHERE "POSITION" IS NOT NULL
GROUP BY "POSITION" ;
SELECT *FROM PLAYER;

SELECT AVG(CASE WHEN "POSITION" = 'GK' THEN HEIGHT END) GK,
	AVG(CASE WHEN "POSITION" = 'MF' THEN HEIGHT END) MF,
	AVG(CASE WHEN "POSITION" = 'FW' THEN HEIGHT END) FW,
	AVG(CASE WHEN "POSITION" = 'DF' THEN HEIGHT END) DF,
	AVG(HEIGHT) "ALL"
FROM PLAYER;
SELECT CASE WHEN "POSITION" = 'GK' THEN HEIGHT END FROM PLAYER;
--player테이블에서 nickname이 null인 사람을 정태민의 닉네임으로 변경하기
SELECT nvl(NICKNAME,(SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME = '정태민'))
FROM PLAYER; 

UPDATE PLAYER 
SET NICKNAME = (SELECT NICKNAME FROM  PLAYER WHERE PLAYER_NAME = '정태민')
WHERE NICKNAME IS NULL;

SELECT NICKNAME FROM PLAYER;

--평균 급여보다 낮은사람 연봉 10%인상

SELECT SALARY, 1.1*SALARY 
FROM EMPLOYEES
WHERE SALARY<(SELECT AVG(SALARY)FROM EMPLOYEES);

--평균 키보다 큰선수들 삭제
DELETE FROM PLAYER
WHERE (SELECT AVG(HEIGHT)FROM PLAYER)<HEIGHT ;

SELECT * FROM PLAYER ORDER BY PLAYER_ID ;

SELECT I.INDEX_NAME  FROM USER_IND_COLUMNS I
WHERE TABLE_NAME = 'PLAYER';

SELECT /*+INDEX_DESC(PLAYER PLAYER_PK) */ * FROM PLAYER;


