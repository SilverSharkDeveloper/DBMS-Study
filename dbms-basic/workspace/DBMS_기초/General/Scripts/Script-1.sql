BEGIN
	DBMS_OUTPUT.PUT_LINE('HELLO');
END;

CREATE OR REPLACE PROCEDURE F
(
	X  NUMBER
)
IS 
BEGIN 
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE(2*X+1);
END;

CALL F(2);


--JOBS 테이블에 INSERT해주는 함수 만들기
CREATE OR REPLACE PROCEDURE JOBS_INSERT(
	JOB_ID IN JOBS.JOB_ID%TYPE,
	JOB_TITLE IN JOBS.JOB_TITLE%TYPE,
	MIN_SAL IN JOBS.MIN_SALARY%TYPE,
	MAX_SAL IN JOBS.MAX_SALARY%TYPE
)
IS 
BEGIN 
	INSERT INTO JOBS
	VALUES(JOB_ID,JOB_TITLE,MIN_SAL,MAX_SAL);
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE('ALL DONE ABOUT ' || JOB_ID);
END;


DROP PROCEDURE JOBS_INSERT;

CALL JOBS_INSERT('EFX','EF',3,5);

SELECT * FROM JOBS ;

--PL/SQL문 
--점수를 받아 학점 뽑기
CREATE OR REPLACE PROCEDURE SCORE_GRADE(
	SCORE IN NUMBER
)
IS 
	GRADE VARCHAR2(5);
BEGIN
	IF SCORE >= 90 THEN GRADE := 'A';
	ELSE IF SCORE >= 80 THEN GRADE := 'B';
	ELSE IF SCORE >= 70 THEN GARDE := 'C';
	ELSE GARDE := 'D';
	END IF;
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE('당신의 학점은 : ' || GRADE || CHAR(10)||'점수는 : ' || SCORE || '점'  );
END;

CALL SCORE_GRADE(83);

SELECT * FROM JOBS;

CALL JOBS_INSERT('DD_AD','SHOW',2000,5000); 

CREATE OR REPLACE PROCEDURE JOB_DELETE(
		P_JOB_ID IN JOBS.JOB_ID%TYPE
)
IS
 CNT NUMBER :=0;
BEGIN 
		SELECT COUNT(JOB_ID) INTO CNT FROM JOBS WHERE JOB_ID = P_JOB_ID;
		IF CNT = 0 THEN DBMS_OUTPUT.ENABLE;
			DBMS_OUTPUT.PUT_LINE('THERE IS NONE JOB_ID');
		ELSE DELETE FROM JOBS 
			WHERE JOB_ID = P_JOB_ID;
		DBMS_OUTPUT.ENABLE;
		DBMS_OUTPUT.PUT_LINE('ALL DONE ABOUT DELETE '||P_JOB_ID);
		END IF;
END;

CALL JOB_DELETE('DD_AD'); 

SELECT * FROM JOBS;
