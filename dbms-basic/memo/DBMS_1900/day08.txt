natural join을 사용할 때의 문제점 : 공유하는 컬럼이 여러개인 경우 원하는 데이터를 가져오지 않을 수있다. -> 가능한 공유하는 컬럼이 한개일 때 사용

내부조인 : 값이 완벽히 일치하는 경우에만 합치기
동등조인 : ON조건이 =을 사용할 때
비동등 조인 : 조인조건을 설정할 때 =이 아닌 BETWEEN, >,< >=,<= 등을 사용하는 경우 (거의 없음)

외부조인(OUTER JOIN)
	값이 완벽히 일치하지 않더라도 조인한다.
	일치하지 않는 값들이 있다며 NULL이 채워져서 합쳐진다.
	LEFT OUTER JOIN
		왼쪽 테이블을 기준으로 OUTER JOIN실행 ->왼쪽 테이블 전체 조회
	RIGHT OUTER JOIN
		오른쪽 테이블을 기준으로 OUTER JOIN 실행 -> 오른쪽 테이블 전체 조회
	FULL OUTER JOIN 
		왼쪽,오른쪽 모두를 기준으로 OUTER JOIN 실행 -> 양쪽 테이블 전체 조회

<여려 테이블을 조회하는 방법>
FROM 테이블1 INNER JOIN 테이블2 
ON 조인 조건 1 INNER JOIN 테이블3
ON 조인 조건 2 ....

-----------------------------------------------------------------------------------------------------
<ORACLE 문법>
	내부조인
	SELECT 컬럼
	FROM 테이블1, 테이블2
	WHERE 조인조건;
	

	외부조인
	->조인 조건의 테이블에 (+)를 붙인다.
-----------------------------------------------------------------------------------------------------

크로스 조인
	행을 합칠때 모든 경우의 수를 기준으로 합치는 조인
	결과 행의 갯수는 테이블 행의 갯수 X 테이블 행의 갯수이다.

USING(컬럼명) 조건절
	동일한 이름을 갖는 커럼 중에서 원하는 컬럼만 선택적으로 JOIN하는 기법
	
	SELECT 컬럼명
	FROM 테이블 1 INNER JOIN 테이블 2
	USING 조건;

집합 연산자
	두개 이상의 테이블을 연결하여 하나로 결합하는 연산자
	SLECET 절의 컬럼 갯수가 동일해야 하며 데이터 타입도 동일해야한다.

	SELECT 컬럼명
	FROM 테이블명
	집합연산자
	SELECT 컬럼명
	FROM 테이블명

	UNION : 합집합 ->중복을 하나의 행으로 표시
	UNION ALL : 합집합 -> 중복을 그대로 표현
	INTERSECT : 교집합 ->중복을 하나의 행으로 표시
	MINUS : 차집합 -> 중복을 하나의 행으로 표시 (순서에따라 다름)

서브쿼리
	SQL문 안에 존재하는 SQL문
사용할 수 있는 절
	SELECT절
	FROM 절
	WHERE 절
	HAVING 절
	ORDER BY 절
	INSERT 문의 VALUES 절
	UPDATE문의 SET 절
특징
	서브쿼리는 소괄호로 감싸서 표현한다
	특수한 경우가 아니라면 서브쿼리 먼저 해석하고 메인쿼리를 해석한다.
	
종류
	단일행 서브쿼리
		서브쿼리 실행 결과가 행 하나
		=,<,>,<=,>=등 비교연산자랑 같이 사용할 수 있다.
	다중행 서브쿼리
		서브쿼리 실행 결과가 여러개의 행
		결과가 여러개이므로 IN, ANY, ALL 등등을 같이 사용할 수 있다.
	다중컬럼 서브쿼리
		서브쿼리 실행 결과가 여러개의 행과 열
		오라클에서만 가능
		하나의 테이블로 생각

계층형 질의
	계층형 데이터를 조회하는 방법

계층형 데이터
	앞 뒤 간의 관계가 존재하는 데이터
	SELECT 컬럼명
	FROM 테이블명
	START WITH 시작조건
	CONNECT BY 연결 방향 조건
	ORDER SIBLINGS BY 정렬 조건

연결 방향 조건
	부모 = PK
	자식 = FK
		자식 = 부모   - 자식->부모로 역방향 전개
		부모 = 자식   - 부모 -> 자식으로 순방향 전개
		~에서 -> ~으로

순방향 계층형 질의
	상위(부모)에서 하위(자식)로 전개
역방향 계층형 질의
	하위(자식)에서 상위(부모)로 전개

	PRIOR = 현재 행을 나타냄
	
정렬조건
	자식이 여러개인 부모의 자식 데이터는 형제 데이터인데 특정한 정렬조건으로 먼저 값을 연결한다.
	**항상 깊이 우선 데이터 탐색이므로 한쪽으로 자식을 설정하면 그상태로 자식이 없을 때 까지 한방향으로만 자식을 탐색한다.**
	그후 더이상 자식데이터가 없으면 부모데이터를 따라 올라와 탐색하지 않은 자식데이터가있는지 그 데이터의 정렬 방식으로 탐색한다.
	넓이 우선 데이터 탐색을 하기 위해서는 LEVEL이라는 가상 테이블을 사용해야한다.


	

