계층형 질의
 
계층형 쿼리 가상 컬럼 : 컬럼이 없는거 처럼 보이지만 가상의 컬럼이 존재한다.
   LEVEL 
      데이터 전개를 시작하는 데이터는 레벨 1 
      그 하위 데이터는 레벨 +1씩 증가 
   CONNECT_BY_ISLEAF
      자기가 리프데이터면 1 아니면 0
	->데이터 전개 과정중에서 더이상 자식이 없으면 1 있으면 0
   CONNECT_BY_ISCYCLE
	  NOCYCLE :사이클이 발생하면 데이터 전개를 멈춘다.
      반드시 CONNECT BY NO CYCLE 이랑 같이 사용해야한다.
      CYCLE이 발생하면 결과는 1 아니면 0
 

계층형 쿼리 함수
   SYS_CONNECT_BY_PATH(경로를 표현할 컬럼명 , 경로와 경로 사이를 연결할 문자열)
      현재 데이터 까지의 경로를 표현 
   CONNECT_BY_ROOT(컬럼명)
      현재 데이터의 루트 데이터를 표현
      루트 데이터 = 데이터 전개를 시작한 데이터




NO CYCLE 은 데이터전개를 멈추고 깊이 우선이기 때문에 마지막 데이터가 사이클이 있으면 다른 데이터는 전개하지 않는가?

--SELF JOIN(자체조인)
   자기 자신 테이블을 조인 하는 기법
   별칭을 사용해야만 한다.
   

===============================================================================
DML(Data Manipulation Language) -> 데이터를 
   SELECT   조회 
   INSERT   추가
   UPDATE   수정 
   DELETE   삭제

INSERT
   INSERT INTO 테이블(컬럼,컬럼,...)
   VALUES(값,값,...);
   컬럼과 값의 순서를 꼭 맞춰주어야한다.
   컬럼 생략 시 설정된 기본값이 삽입 된다.

   
   INSERT INTO 테이블
   VALUES(값,값...);
   컬럼을 생략할 경우 -> 반드시 테이블 속 컬럼의 순서와 값이 일치해야하며 특정 값을 생략할 수 없다.

UPDATE
   UPDATE 테이블   
   SET 컬럼 = 값, 컬럼 = 값, ...
   WHERE 조건 (생략이 가능하지만 테이블 내에 컬럼의 모든 값을 다바꾸므로 사용하지 않음)
DELETE
   DELETE [FROM] 테이블명
   WHERE 조건
   행 하나 전체 삭제


================================================================================

TCL(Transaction Control Language)
   트랜잭션을 다룰 때 사용하는 언어

트랜잭션
   업무 처리를 위한 데이터베이스의 논리적인 작업 단위

  1.COMMIT
  2.ROLLBACK
  3.SAVEPOINT 





출금(update) 입금 (update) -> 하나의 트랜잭션

트랜잭션의 특징(ACID)
	Atoimicity 원자성
		트랜잭션은 더이상 분해가 불가능한 업무의 최소 단위를 의미
		트랜잭션은 성공되거나 전혀 실행되지 않는 것(All or Nothing)
	Consistency 일관성
		트랜잭션이 실행되기 전과 후의 데이터베이스 내용에 잘못이 있으면 안되고
		트랜잭션 실행의 결과로 데이터베이스의 상태가 모순되지 않아야함
	Isolation 독립성
		실행중인 트랜잭션의 중간 결과에 다른 트랜잭션 접근 불가
	DUrability 지속성
		트랜잭션이 성공적으로 완료되었으면 결과는 영구적으로 반영되어야 한다.

트랜잭션 실행
	성공 -> COMMIT   	-> 데이터베이스에 영구적으로 반영
	실패 -> ROLLBACK 	-> 마지막 COMMIT된 상태로 되돌아감


<트랜잭션 모드>
AUTO COMMIT 모드
	DBMS가 자동으로 트랜잭션을 관리하는 모드
	데이터를 실질적으로 바꾸는 DML(INSERT, UPDATE, DELETE)을 실행할 때
	오류가 있으면 자동으로 ROLLBACK 오류가 없으면 자동으로 COMMIT

암시적 트랜잭션
	트랜잭션의 시작은 DBMS가 정하고(마지막 COMMIT지점) , 끝은 사용자가 명시적으로 COMMIT이나 ROLLBACK으로 처리

명시적 트랜잭션
	BEGIN TRANSACTION ( BEGIN TRAN) -> 트랜잭션의 시작을 명시
	COMMIT TRANSACTION OR ROLLBACK TRANSACTION -> 트랜잭션의 끝을 명시

SAVEPOINT
	하나의 트랜잭션을 분할하는 명령어

============================================================================
DDL(Data Definition Langugae) 테이블과 같은 데이터 구조를 생성 삭제 변경하는 언어(데이터의 구조를 정의함)

데이터 구조
	TABLE
		데이터를 저장하는 기본 단위, 행과 열로 구성된 표
	VIEW
		가상 테이블 -> 실제 저장공간에 있는 데이터가 아닌 테이블에서 필요한 데이터만 모아 가상으로 만든 테이블
	INDEX
		검색 속도를 향상시키기 위한 데이터베이스 오브젝트
		데이터를 찾아갈 때 특정한 지점을 설정
	SCHEMA
		데이터베이스의 구조와 제약조건에 관한 전반적인 설명을 기술한 메타데이터(설명 데이터)의 모음

데이터 타입
	VARCHAR2(BYTE크기) ->길이가 가변적인 문자
				VARCHAR이라고 표현
				오라클은 최소 1 ~4000BYTE까지, SQL SERVER는 최소 1~8000BYTE
	CHAR(BYTE크기) -> 길이가 고정적인 문자
					
	NUMBER(P,S) -> 숫자
			P = 전체 자릿수, S = 소수점 아래 자릿수
			NUMERIC 이라고 표현
	DATE -> 날짜

데이터 무결성	
	저장된 값과 사용자가 의도한 데이터 값은 일치해야 한다.
	->사람은 직관적이지만 컴퓨터는 넣는 데이터를 직관적이지 않게 다 넣는다. 따라서 무결성을 어길 수 있다.
	->제약 조건을 이용해 무결성을 지킬 수 있다.

	개체무결성(entity integrity)
		각각의 행을 구분될 수 있어야 한다. ->각각의 행을 구분할 수 있는 중복되지 않는 PRIMARY KEY를 가진 컬럼이 존재해야한다.
	참조무결성(reference integrity) 
		참조하고 있는 값들 간에는 모순이 없어야 한다. ->FK 가 PK를 참조할 때 PK에 없는 값을 넣을 수 없다.
	영역무결성(domain integrity)
		형태, 범위, 기본값, 유일성 등에 대한 제한 -> UK, DEFAULT,등등 설정
	비즈니스무결성(business integrity)
		사용자의 업무규칙에 따른 비즈니스적인 규칙 
	

제약조건
	정해놓은 규칙에 알맞은 데이터만 입력받고 규칙에 어긋나는 데이터는 거부하여 데이터 무결성을 지키는 방법
	
제약조건 종류
	UNIQUE
		중복된 값은 넣을 수 없는 제약조건
		(NULL값은 중복이 아니라고 판단 데이터가 없어서 비교대상 제외)
	CHECK
		특정 범위에 값만 넣을 수 있도록 하는 제약조건
	NOT NULL 
		NULL값은 넣을 수 없다. (CHECK의 일종)
		CONSTRAINT로 추가 불가
	DEFAULT
		데이터를 추가할 때 아무값도 넣지 않으면 자동으로 들어가는 기본값 설정
		반드시 제약조건중 제일 먼저 써야 한다.
		CONSTRAINT로 추가 불가
	PRIMARY KEY(기본키)
		NULL값을 넣을 수 없고, 중복된 값을 넣을 수 없는 제약조건
		테이블 당 하나의 PK만 생설할 수 있다.
	FORIEGN KEY(외래키)
		참조 하고 있는 컬럼은 참조 되고 있는 컬럼 속에 들어있는 값만 추가할 수 있고  ->추가는 참조되는 컬럼(PK)부터 생성
		참조 되고 있는 컬럼은 참조 하고 있는 컬럼 속에 들어있는 값은 삭제 할 수 없다. ->삭제는 참조하고 있는 컬럼(FK)부터 삭제

DDL종류

	1CREATE
		1.컬럼 수준에서 제약조건 설정 
		CREATE TABLE 테이블명(
			컬럼명 데이터타입(크기)[DEFAULT 기본값] [제약조건] [제약조건] ...,
			컬럼명 데이터타입(크기)[DEFAULT 기본값] [제약조건] [제약조건]....,
			....
		);
		2.테이블 수준에서 제약조건 설정
		CREATE TABLE 테이블명(
			컬럼명 데이터타입(크기),
			컬럼명 데이터타입(크기),
				.....
			CONSTRAINT 제약조건이름 제약조건종류(컬럼),
			CONSTRAINT 제약조건이름 제약조건종류(컬럼)		
				.......
		);	


	2.ALTER : 컬럼의 데이터타입 이름을 변경하거나 추가,삭제,제약조건 추가, 삭제 등등
		1.ADD 추가
			새로운 컬럼 추가
			ALTER TABLE 테이블명 ADD (컬럼명 데이터타입(크기)[제약조건]);
			
			제약조건 추가
			ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건 이름 제약조건종류(컬럼);
		
		2.MODIFY 수정
			기존 컬럼 수정
			ALTER TABLE 테이블명 MODIFY(컬럼명 데이터타입(크기) [DEFAULT 값][제약조건]);
			기존 설정한 제약조건은 남아있으므로 데이터 타입을 수정하는 경우 기존에 존재하는 제약조건과 상충되지 않도록 해야한다.
		**제약조건은 반드시 삭제하고 다시 추가하는 방법밖에 없다 수정이 안된다.
		
		3.DROP 삭제
			기종 컬럼 삭제
			ALTER TABLE 테이블명 DROP COLUMN 컬럼명;
			그 컬럼에 설정된 제약조건도 같이 삭제가 된다.
			
			제약 조건 삭제
			ALTER TABLE 테이블명 DROP CONSTRAINT 제약조건이름;
		
		4.RENAME 이름 변경
			컬럼 이름 변경
			ALTER TABLE 테이블명 RENAME COLUMN 기존컬럼명 TO 새로운 컬럼명 ;

			제약조건 이름 변경
			ALTER TABLE 테이블명 RENAME CONSTRAITN 기존 제약조건 이름 TO 새로운 제약조건 이름;
		
			테이블 이름 변경
			ALTER TABLE 테이블명 RENAME TO 새로운 테이블명;
		
		5.ENABLE/DISABLE 활성화 비활성화	
			제약조건 활성화 / 비활성활
			ALTER TABLE 테이블명 ENABLE / DISABLE CONSTRAINT 제약조건명;
		


	3.TRUNCATE : 테이블 안에 모든 행을 제거 (모든 데이터 제거)
	TRUNCATE TABLE 테이블명;

**			TRUNCATE 		DELETE
명령어종류		DDL			DML
ROLLBACK		불가능			가능
삭제상태		최초 상태로 만듬	데이터 사제
	
	4.DROP : 테이블 삭제
		DROP TABLE 테이블명;

**참조 무결성에 위반되는지 확인해야한다. 
	->이미 참조되고 있는 데이터가 있을경우 외래키 제약조건을 먼저 삭제하고 테이블 삭제가 가능하다.
	->테이블을 참조하고있는 외래키 제약조건을 삭제하고 테이블 삭제(오라클만 가능)
			DROP TABLE 테이블명 CASCADE CONSTRAINT;
