Live SQL
	연습용 데이터 받기
	Code Library --> hr 검색 --> Run Scripts --> 
	Perform Actions

Dbeaver
	Script파일 만들기
	Scripts폴더 마우스 우클릭 > New > Create New File

	Script파일 이름변경
	마우스우클릭 > 이름변경 > 확인

	Script파일 DB와 연결하기
	상단 Connect Datasource에 연결하고 싶은 DBMS 더블클릭

Dbeaver 글씨크기
	윈도우 > 옵션 > User Interface > 모양 > 글꼴 및 색 >
	기본 폴더 > 텍스트 글꼴 더블클릭 > 글꼴 및 크기 설정후 적용>
	Apply and Close

	단축키 ctrl +  /  ctr -
Scripts 파일
	명령어들을 모아놓은 파일
	scripts파일을 사용하면 내가 작성한 명령어를 
	순서대로 확인할 수 있다는 장점이 있다.

SQL(Sturctured Query Language) ->명령어를 의미한다.
	SQL문, 쿼리(문), 질의(문)	
	특징
		대문자 소문자는 구분하지 않는다. 
		한 줄 한 줄씩 실행이 된다.  ->데이터를 다루는 언어들은 대게 한줄한줄씩 실행한다.(파이썬,R,SQL...) -> 대화형 언어(interpreter언어)
						->하나의 질문을하면 하나의 응답으로 대화하는 형식
		
가독성을 높이기 위해 사용하는 방법
	1.예약어(이미 역할이 정해져있는 키워드)는 대문자
	   나머지는 소문자로 작성

	2.너무 길어질 경우에는 엔터를 쓴다. ->보통 내용이 달라지는 곳에서사용
	(엔터는 눈으로 볼때만 적용되는 것이고, 컴퓨터는 한 줄이라고 인식)

	3.내용이 비슷한 부분은 들여쓰기를 표현한다. ->같은 내용인데 엔터가 사용된 경우 사용
	(들여쓰기도 눈으로 볼 때만 적용되는 것이고, 컴퓨터는 인식 X)

	4.(--)주석 -> 설명을 쓰기위한 컴퓨터가 해석하지 않는 부분

RDBMS에서의 데이터 저장 방식
	2차원의 표 형태로 저장한다
	Table : 데이터가 저장되어있는 표
	Column : 컬럼, 열, 세로줄, 속성(attribute)
	Row : 로우, 행, 가로줄, 인스턴스(instance), 튜플(tuple)
	
SELECT 문
	테이블에서 원하는 데이터를 조회 하는데 사용하는 명령어

	SELECT 컬럼명 FROM 테이블명;
		->컬럼에 해당하는 데이터를 보여준다. (행의 순서는 상관없이 그 컬럼에 해당한 데이터의 값을 모두 보여준다.)
	SELECT 컬럼명, 컬럼명, 컬럼명, ... FROM 테이블명;
		->작성한 컬럼에 해당한 데이터를 모두 보여준다. (행의 순서는 상관없지만 같은 행에 있는 컬럼끼리는 짝을 맞추어 보여준다.)
	SELECT *(all) FROM 테이블명;
		->테이블에 있는 모든 컬럼을 보여준다.

조회할때 정렬하여 조회하기
	ORDER BY 절

	SELECT 컬럼명, 컬럼명 ,... FROM 테이블명 ORDER BY 컬럼명(ASC or DESC), 컬럼명(ASC or DESC),...;

        --ORDER BY 컬럼 DESC -->해당 컬럼 속에 들어있는 값 내림차순 정렬
        --ORDER BY 컬럼 ASC(생략가능)--> 해당 컬럼 속에 들어있는 값 오름차순 정렬

        --ORDER BY 절에 컬럼명을 여러 개 쓸경우
	->앞에있는 컬럼에 오름(ARC)또는 내림(DESC)차순으로 정렬후 그 컬럼에 중복값이 존재하는 데이터끼리 
	   다음 컬럼명의 데이터에 따라 오름 또는 내림차순으로 정렬한다.

중복되는 데이터를 제외하고 조회하기
	DISTINCT
	ALL(생략) -> DISTINCT를 쓰지 않을경우 ALL을 쓰는데 생략이 가능하다!

	SELECT DISTINCT 컬럼명,컬럼명... FROM 테이블명;
	컬럼에 있는 데이터의 중복되는 값은 제외하고 조회하기->데이터의 종류나 종류의 갯수를 조회하고 싶을 때 사용.
		->컬럼명이 여러개일 경우 컬럼의 데이터가 모두같은 행의 데이터만 제외. ->행과 열의 숫자를 맞추기위해서
	ex) SELECT DISTINCT first_name, salary FROM employees;
	각각에 컬럼이 중복되는 데이터 제거가 아닌 두개의 컬럼모두가 중복되는 데이터만 제거하고 조회
          ->컬럼이 많아져도 똑같이 모든 컬럼이 중복되는 데이터만 제거후 조회 



값의 종류
	문자	'안녕', 'kevin', 'david', '20', '1', ...
	숫자	3, 3.5, -5, ....
	날짜	
값의 종류 찾는법
localhost -> Schemas -> HR -> Tables -> employees ->Type으로 확인가능

연산자
	피연산자의 종류, 연산 결과 값, 연산 결과 값의 종류 

연결연산자
	피연산자는 어떤 타입이 와도 상관 없으며 연산결과는 문자타입이다.
	피연산자1 || 피연산자2 --> 피연산자1피연산자2 
	ex)SELECT email ||'@koreait.com' FROM employees;

** ''(작은따옴표)안에 문자값을 넣어주어야 문자로 인식한다. 쓰지 않을경우 컬럼명으로 인식한다.**
	숫자는 무조건 숫타타입의 값으로 인식 ->명령어로 사용할수 없게 만들어 놓음.

산술연산자
	피연산자 자리에는 숫자 타입 값과 날짜 타입 값이 와야한다.
	+
	-
	*
	/

날짜타입이 가능한 경우 (+,-)
	날짜 + 숫자 --> 해당 일수만큼 뒤의 날짜가 결과
	날짜 - 숫자 --> 해당 일수만큼 이전의 날짜가 결과
		**숫자 1은 하루를 나타냄 ->시간, 분,초 는 1로 치환하여 연산
		-> 시간 = 시간/24 
		-> 분 = 분/24/60 
		-> 초 = 초/24/60/60

	날짜 - 날짜 --> 해당 날짜 사이의 일수로 숫자타입의 결과 
		사용 예시 ->D-Day,현재시간 - 오픈일수(이벤트) = -일수  
	
		ex)SELECT  sysdate, hire_date,sysdate - hire_date FROM employees;
		sysdate = 시스템상 현재 날짜
		현재 날짜와 hire_date 사이의 일수가 숫자타입으로 출력
				

조건 자리에 사용되는 연산자
	조건은 행을 골라낼때 사용한다.
	관계연산자, SQL연산자, 논리연산자

관계(비교)연산자
	a > b
	a < b
	a >= b
	a <= b
	a = b
 	a <> b






















