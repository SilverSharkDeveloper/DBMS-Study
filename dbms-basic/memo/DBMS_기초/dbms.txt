DB(DataBase)
	데이터가 모여 있는 기지. ->서버
	추상적인 용어이다.

DBMS(DataBase Management Ststem)
	데이터를 관리할 수 있는 구체적인 시스템
	오라클, 마리아DB MySQL, MS-SQL, Mongo,....
	

오라클 DBMS버전 -> 어필하는 용어
i : internet
g : grid
c : cloud
----------------------------------------------------------------------
계정
	sys : 모든 권한
	system : 계정 관리
	일반계정 : 해당 스키마를 관리(hr,op,he,scott,...)

hr계정 잠금해제
CMD -> sqlplus sys as sysbda -> 비밀번호
SQL> alter user system identified by 1234;
SQL>conn system/1234
SQL>alter user hr account unlock;
SQL>alter user hr identified by hr;
SQL>conn hr/hr

스키마 : 정리가 잘 되어 있는 표들의 묶음, 상태

RDBMS : 관계형 데이터베이스 시스템 -> 테이블끼리 서로 관계를 맺는다.

SQL(인터프리터 언어), 쿼리문
	한 줄 씩 번역되고 빈번한 수정이 있을 때 효율적이다.
	전체를 실행하지 않고 부분만 실행하고 싶을 때에도 편리한 언어이다.
	일괄처리를 할 때에는 컴파일 언어보다 효율이 떨어진다.

DBMS의 소통 방식
--------------------------------------------------------------------------------------------------------------
	 		사용자
--------------------------------------------------------------------------------------------------------------
	↕		↕			↕
고객관리		↕		주문관리
응용 프로그램		↕		응용 프로그램
	↕		↕			↕
--------------------------------------------------------------------------------------------------------------
			DBMS
--------------------------------------------------------------------------------------------------------------
1.사용자와 DBMS의 직접소통가능
2.대부분은 응용프로그램을 이용해 DBMS와 소통

--------------------------------------------------------------------------------------------------------------
Table

Table A(USER)					Table B(ORDER)
번호(PK)  이름	나이		아이디	(UK)	구매번호(PK)		번호(FK)	날짜 		상품
1	이순신		21	      ess1234		20210505001	1		20210505	공기청정기	
2	홍길동		20	     hgd1234		20210505002	3		20210505	4K모니터
3	심청이		24	      sce9999		20210506001	4		20210506	목도리
4	장보고		23	      jbg9999		20210508009	4		20210508	빨래집게

이러한 구조를 가지는 것을 Table, relation(오라클), Class라고 부른다.

COLUMN(열,속성,필드) : 공통된 값들의 주제
ROW(행,레코드,튜플) : 하나의 정보
Primary Key(PK) : 고유한 값으로 행의 구분점으로 사용된다.
			->중복이 없고 NULL값은 허용하지 않는다.
Foreing Key(FK) : 다른 테이블의 PK를 의미한다.
			->보통 테이블끼리 관계를 맺을 때 사용된다.
			->중복이 가능하다.
			->PK에 없는 값을 사용할 수 없다.
Unique Key(UK) : NULL값은 허용하지만 중복은 허용하지 않는다.
--------------------------------------------------------------------------------------------------------------
SQL문
	DDL(Data Definition Language) : 데이터 정의어 ->테이블조작, 제어 관련된 쿼리문
		1.CREATE : 테이블 생성
		2.DROP : 테이블 삭제
		3.ALTER : 테이블 수정 
				-테이블명 수정 : RENAME TO [새로운 테이블명]
				-컬럼 추가 : ADD([새로운 컬렴명],[컬럼 타입])
				-컬럼명 변경 : RENAME COLUMN[생성된 컬럼명] TO [새로운 커럼명]
				-컬럼 삭제 : DROP COLUMN[생성된 컬럼명]
		4.TRUNCATE : 테이블 내용 전체 삭제

자료형(TYPE)
	숫자
		NUMBER(precision) : 정수
		NUMBER(precision,소수점자릿수) : 실수
		NUMBER : 생략시 22byte까지 입력가능 (38자리 정수)

	문자열
		CHAR(길이) : 고정형
			CHAR(4)에 'A'를 넣으면 A^^^빈 자리가 공백으로 채워짐
			형식을 정한 날짜, 주민등록번호처럼 글자 수 가 절대 변하지 않는 값을 넣는다.
		VARCHAR(길이), VARCHAR2(길이) : 가변형
			값의 길이만큼 공간이 배정된다. 글자 수에 변화가 있는 값을 넣는다.
		DATE : FORMAT에 맞춰서 날짜를 저장하는 타입


---------------------------------------------------------------------------------------------------------
무결성 -> 테이블에 결점이 없게 만들도록 하는 성질
	
	데이터의 정확성,일관성,유효성이 유지되는 것.
	1.정확성
		데이터는 애매하지 않아야 한다.
	2.일관성
		각 사용자가 일관된 데이터를 볼 수 있도록 해야한다.
	3.유효성 
		데이터가 실제 존재하는 데이터여야 한다.

1.개체 무결성
	모든 테이블이 PK로 선택된 컬럼을 가져야한다.
	->PK로 선택된 컬럼은 고유한 값을 가져야하며, 빈 값, NULL값은 허용하지 않는다. ->반드시 pk컬럼을 가진 테이블을 만들어라
2.참조 무결성
	두 테이블의 데이터가 항상 일관된 값을 가지도록 유지하는 것.
	pk - fk값이 같도록 유지해라.
3.도메인 무결성	
	컬럼의 타입, NULL값의 허용 등에 대한 사항을 정의하고 올바른 데이터가 입력되었는지를 확인하는 것
	->제약조건을 통해 꼼꼼히 설계해라


모델링
	추상적인 주제를 DB에 맞게 설계하는 것 
		->목적 : 조회를 편하고 빠르게 하기 위해서,DDL을 쉽고 헷갈리지 않게 하기 위해서.

1.요구사항 분석
	회원,주문,상품 : 3가지를 관리하고자 한다.
2.개념적 설계 (개념 모델링) 
3.논리적 설계(논리 모델링) -> pk, fk 등등 설정
 
4.물리적 설계(물리 모델링) -> 각 컬럼명, 타입 등등 상세한 데이터를 설계한다.

---------------------------------------------------------------------------------------------------------
DML(Data Manipulation Language) -> 데이터 조작어
	SELECT : 조회(검색)
		SELECT 컬럼명1,컬럼명2....FROM 테이블명
		WHERE 조건식;
	
	INSERT : 추가
		INSERT INTO 테이블명
		(컬럼명1,컬럼명2,...)  ->default 제약조건이 있는경우 그 컬럼을 생략하고 값도 생략할 수 있다.
		VALUES(값1,값2,...)
	
		INSERT INTO 테이블명 VALUES(값1,값2,....) ->무조건 컬럼만든 순서대로 하나씩 다 써야한다.
		**--추가 : 부모와 자식중 무조건 부모테이블에 값을 먼저 추가해야한다.*

	UPDATE : 수정
		UPDATE 테이블명
		SET 컬럼명 = 새로운 값
		WHERE 조건식 ->바꿀 행을 골라냄
	
	DELETE : 삭제
		DELETE FROM 테이블명
		WHERE 조건식; -> 하나의 행(데이터)를 모두 삭제	
	**삭제 : 부모의 참조값을 가진 자식 데이터를 삭제하기 전에 부모테이블의 데이터 삭제 불가능 ->아무데서도 참조하지않아야 삭제가능
	DELETE VS TRUNCATE
	복구가능	복구불가

결과 내보내기
->테이블전체 드래그 후 마우스 우클릭 내보내기
	1.엑셀 파일로 내보내기
	2.HTML로 내보내기
	3.SQL로 내보내기 -> CMD창 열어서 HR계정 로그인 후 @주소(드래그가능) ->데이터가 이미 있을시 SQL문 작동이 안되므로 TRUCATE로 테이블 비움
		->실행시 임시 저장소에 저장 ->COMMIT 입력시 완전히 저장 -> DBEAVER의 테이블에서도 나옴.

조건식 : 참 또는 거짓 둘 중 하나의 결과가 나오는 식
	where조건식
	>,<
	>=,<=
	=
	<>,!=,^=
	AND
	OR
	---------------------------------------------------------------------------------------------------------

TCL(Transaction Control Language) : -> 트랜젝션 제어 언어
			DML을 위한 명령 ->DDL은 사용 불가

트랜젝션 
	하나의 작업 단위
		어떠한 작업을 하기위해서 세개의 쿼리문을 작성해야한다.(SELECT INSERT UPDATE) ->하나의 작업 단위
			
COMMIT
	모든작업을 확정하는 명령어

ROLLBACK
	이전 커밋한 지점으로 이동 ->지금 작업한 트렌잭션 다 복구

  TRUNCATE는 테이블 내용을 전체 삭제하므로,DELETE보다 빠르게 처리할 수 있다. ->대용량 데이터 처리에 유리하다.
		TRUNCATE는 DDL로 TCL사용이 안되므로 복구가 불가능하다.

---------------------------------------------------------------------------------------------------------

정규화
	삽입/수정/삭제의 이상현상을 제거
	데이터의 중복 최소화
	대부분 3차 정규화까지만 진행

1차 정규화(1NF)
	하나의 컬럼에 값이 1개씩만 있어야 한다. EX)특기, 취미등을 고른다.
	반복적인 컬럼 값이 나타나는 경우 EX)상품명 : 바지1, 바지2, 바지3 -> 검색이 힘들다
		정규화 진행 - 상품명
				바지1		
				바지2
				바지3
2차 정규화(2NF)
	테이블의 모든 컬럼이 서로 관계가 있어야 한다.
	모든 컬럼이 서로 관계가 없는 경우
	EX)
	USER_TABLE
	이름	나이	상품명
	A	10	바지
	B	11	치마
	C	12	자켓

	-정규화 진행
	USER
	이름	나이
	A	10
	B	11
	C	12

	PRODUCT
	나이	상품명
	10	바지
	11	치마
	12	자켓	

3차정규화(3NF) 하나의 컬럼이 다른 컬럼을 의미할 수도 있다. ->중복된 데이터가 생긴다.
	이름	시	구	동	우편번호
	A	서울	관악	봉천	44332
	B	인천	남동	만수	19034

	*우편번호로 시,구,동을 알 수 있다.
	->중복된 데이터가 생길 가능성이 있다.
	
	-정규화 진행
	이름 우편번호
	A	 44332
	B 	19034

	우편번호	시	구	동
	44332		서울	관악	봉천
	19034		인천	남동	만수

-반정규화 : 정규화 해놓은 데이터는 데이터 처리 속도가 느리므로 처리를 빨리하고싶거나 테이블이 너무많아 불편함을 느끼면
		테이블을 합치는 작업인 반정규화를 한다.
->설계시점에서 굉장히 많은 생각이 필요하다.

데이터베이스에서 정규화가 필요한 이유
	데이터 베이스를 잘못 설계하면 불필요한 데이터 중복으로 인해 공간이 낭비된다.
	이러한 현상을 이상현상(ANOMALY)이라고 한다.
	
	회원번호와 프로젝트 코드 두 컬럼의 조합키로 설정되어 있는 테이블이고
	한 사람은 하나의 부서만 가질 수 있다.

	회원번호 	이름	부서	프로젝트코드	급여	부서별명수
	21060601	A	개발	ABC0001	3000	4
	21060601	A	개발	CBA1112	2000	4
	21060601	A	개발	EFG9991	4000	4
	21060604	B	기획	JIJ8282	5000	2
	21060605	C	디자인	MNO3000	7000	3

이상현상(ANOMALY)의 종류
	1.삽입이상
		새 데이터를 삽입하기 위해 불필요한 데이터도 삽입해야 하는 문제
		EX)담당 프로젝트가 정해지지 않은 사원이 있다면, 프로젝트 코드에NULL을 작성할 수 없으므로 이사원은 테이블에 추가될 수 없다.
			따라서 '미정'이라는 프로젝트 코드를 따로 만들어서 삽입해야 한다.

	2.갱신이상
		중복 행 중 일부만 변경하여 데이터가 불일치하게 되는 모순의 문제
		EX)한명의 사원은 반드시 하나의 부서만 가질 수 있다. 만약 A가 다른 부서로 옮기면 A에 관한 모든 행에 대하여 부서 갱신을 하지 않으면
			어디 부서인지 알 수 없다. 이러한 현상을 갱신이상이라고한다.

	3.삭제이상
		행을 삭제하면 꼭 필요한 데이터까지 함께 삭제되는 문제
		B가 담당한 프로젝트를 망쳐 드랍된다면 B행을 모두 삭제하게된다. -> 프로젝트에서 드랍되면 모든 데이터를 드랍하게된다.
		이러한 현상을 삭제 이상이라고 한다.
	
	이상현상 발생이유 -> 데이블이 정규화가 되어 있지 않기 때문이다.
	정규화를 진행하기 위해서는 각 컬럼간의 관련성을 파악해야 하고, 이 관련성을 함수적 종속성(Functional  Dependency)이라고 한다.
	따라서 하나의 테이블에서는 하나의 함수적 종속성만 존재하도록 정규화를 한다.

	함수 x -> y
	x : 결정자 : y를 결정한다.
	y : 종속자 : x에 종속되어있다.

====================================================================================
NULL
	정의되지 않은 값
	빈 값 대신 미정 값을 부여할 때 사용(pk는 불가능, fk는 가능)

NOT NULL 제약조건
	ALTER TABLE 테이블명 MODIFY 컬럼명 NOY NULL;

제약조건 삭제
	ALTER TABLE 테이블명 DROP CONSTRAINT 제약조건 이름;
조건식
	컬럼명 IS NULL : 컬럼 값이 NULL이면 참
	컬럼명 IS NOT NULL : 컬럼값이 NULL이 아니면 참
NULL 값을 다른 값으로 변경
	NVL() : NULL값 대신 다른 값으로 변경 후 검색
	NVL2() : NULL값일 때의 값, NULL값이 아닐 때의 값을 각각 설정

집계함수 : 여러개의 값을 하나의 값으로 집계하여 나타낸다. **주의!(NULL은 포함하지 않는다)
WHERE 절에서는 사용할 수 없다.
--AVG() : 평균
--MAX() : 최댓값
--MIN() : 최솟값
--SUM() : 총합
--COUNT() : 개수


서브쿼리(SUBQUERY ) 쿼리문안에 또다른 쿼리문 : 항상 값으로 생각한다.
	1.SELECT절 서브쿼리 : SCALAR ->또다른 결과 값을 다른테이블에서 조회를 해야할 때, 그룹바이로 묶여있을때
	2.FROM절 서브쿼리 : IN LINE VIEW -> 조건 하나를 먼저 배제하고 결과가 나온 테이블로 부터 다시 조회를 할 때
	3.WHERE절 서브쿼리 : SUB QUERY ->WHERE절에서 집계함수를 사용하고 싶을때

------------------------------------------------------------------------------
OPTIMIZER
	COST : 예상 수행 시간 -> 쿼리를 수행하는 데 소요되는 일량 또는 시간
	CARDINALITY : 실행 결과의 건수

SQL을 가장 빠르고 효율적으로 수행할 최적의 처리경로(최저비용)을 생성해주는 DBMS 내부의 핵심 엔진
사용자가 쿼리문(SQL)으로 결과를 요청하면, 이를 생성하는 데 필요한 처리경로는 DBMS에 내장된 옵티마이저가
자동으로 생성한다.
옵티마이저가 생성한 SQL처리 경로를 실행 계획(EXCUTION PLAN)이라고 한다.

옵티마이저의 SQ최적화 과정
	사용자가 작성한 쿼리 수행을 위해, 실행될 만한 실행 계획을 찾는다.
	데이터 딕셔너리에 미리 수집해 놓은 오브젝트 통계 및 시스템 통계 정보를 이용해
	각 실행 계획의 예상 비용을 산정한다.
	각 실행계획을 비교해서 최저 비용을 갖는 하나를 선택하여 실행한다.
옵티마이저 종류
1. 규칙기반 옵티마이저(RULE BASED OPTIMIZER), 휴리스틱(HEURISTIC) 옵티마이저
	미리 정해진 규칙에 따라 실행.
	ORCAL 10G 버전 부터는 RBO에 대한 지원 중단

2.비용 기반 옵티마이저(COST BASED OPTIMIZER)
	비용이 가장 낮은 실행계획을 선택
	
	PARSER	   OPTIMIZER	          ROW_SOURCE      	SQL_ENGINE
			 		                   GENERATOR

	문법 오류 검사 	총 비용 계산	실행    가능한 코드로 변경	     실행
	코드로 변경		실행계획 생성

**SQL 실행 순서
	FROM > WHERE > GROUP BY > HAVING > SELECT > ORDER BY

힌트(HINT): /* + HINT */ ->인덱스를 가지고 순서를 부여받아 데이터를 가져올 때 부터 정렬해준다.
	SELECT문에 실행하고 싶은 계획을 전달할 때 사용한다.
	잘못 작성되어도 실행할 때에는 무시되며 별도의 오류는 발생하지 않는다.
	/*+로 시작되며 */로 마친다. 또한 뒤에 컬럼명을 작성할 때 ,콤마를 사용하지 않는다.
	
	SELECT /* + INDEX_DESC(테이블명 PK명) */ 컬럼,컬럼 FROM 테이블명;
				_DESC생략시 오름차순 정렬

JOIN
	여러 테이블에 흩어져 있는 정보 중 사용자가 필요한 정보만 가져와 가상의 테이블을 만들고 결과를 보여주는 것
	조회 테이블이 너무 많이 쪼개져 있으면 느리기 때문에 입력, 수정 ,삭제의 성능을 향상시키기 위해 사용

-내부 조인(INNTER JOIN) : INNER 생략가능	
	조건이 일치하는 값이 두 테이블에 모두 존재할 때 조회 ->PK와 FK가 연결이 되어 있어야 한다.

테이블명 A INNER(생략가능) JOIN 테이블명 B
ON 조건식

-등가 조인 : ON절에 등호가 있을 때
-비등가 조인 : ON절에 등호가 없을 때

ON절의 조건은 JOIN이 되면서 실행되고
WHERE절의 조건은 JOIN이 모두 끝나고 나서 실행된다.
->ON절에서 처리 할 수 있는 처리는 모두 하는것이 좋다.

--네츄럴 조인(NATURAL JOIN)
	자동으로 동일한 컬럼을 연결해줌
--USING(중복컬럼) : 중복되는 컬럼이 생길 시 맨 앞으로 출력하며 중복 컬럼을 한개만 출력한다.
	INNER JOIN에 ON절에 사용한다. -> NATURAL JOIN과 같음
**컬럼 이름뿐만 아니라 타입도 같아야 한다.

외부 조인(OUTER JOIN)
--두 개의 테이블 중 조건이 거짓이라도 지정한 테이블의 모든 정보가 검색되어야할 때 사용한다.

1.LEFT OUTER JOIN
2.RIGHT OUTER JOIN
3.FULL OUTER JOIN

------------------------------------------------------------------------------

DCL(Data Control Language) : 데이터 제어하는 언어
	GRANT : 권한 부여
	REVOKE : 권한 회수

	ROLL : 권한이 뭉쳐있는 상태
		CONNECT, RESOURCE, DBA(거의 모든 권한)

테이블 복사
	CREATE TABLE 테이블명 AS SELECT * FROM 테이블명

VIEW(가상의 테이블)
	기존의 테이블은 그대로 놔둔 채 필요한 컬럼들 및 새로운 컬럼을 만든 가상의 테이블
	실제 데이터가 저장되는것은 아니지만 VIEW를 통해서 데이터를 관리할 수는 있다.
	
	장점
	1.독립성 : 다른곳에서 직접 변경하지 못하도록 막아준다.
	2.편리성 : 긴 쿼리문을 짧게 사용할 수 있다.
	3.보안성 : 원본 테이블에 접근하지 못하게 막아주고 기존 쿼리나 컬럼은 보여주지 않는다.

	CREATE VIEW 뷰 이름 AS(SELECT 컬럼명,컬럼명... FROM 테이블명);


--------------------------------------------------------------------------------------
프로시저(PROCEDURE) -> 함수

함수란 : 이름()

F 		(X) 		=		2X+1
함수이름	매개변수			(OUT값)
		(IN값)		

CREATE OR REPLACE PROCEDURE 프로시저의 이름 
(
	매개변수1 	IN(생략가능)	데이터타입,
	매개변수2	IN(생략가능) 	컬럼명%TYPE
)
IS
	함수내에서 사용할 변수, 상수 등 선언
BEGIN
	실행할문장;
END;

**영역 잡고 CTRL ENTER

프로시저 사용
	CALL 프로시저의 이름(값1,값2) ->반드시 매개변수의 타입과 순서에 맞춰 값을 넣어주어야 한다.

BDSM출력문 활용
BEGIN
	BDSM_OUTPUT.ENABLE;
	BDSM_OUTPUT.PUT_LINE(출력할문자열)
END

PL/SQL문(IF문) -> 서브쿼리 또는 각각의 컬럼값을 사용할 수 없음. IS문에서 변수를 선언하고 이를 통한 IF문 제어를 해야함
1.IF조건 THEN 실행문;
	END IF ;

2.IF 조건 THEN 실행문;
	ELSIF 조건 THEN 실행문;
	....
	ESLE 실행문;
	END IF;
3.IF 조건 THEN 실행문;
	ELSE 실행문;
	END IF;


(DECLARE = 임시 저장공간 PROCEDURE에 IS문)
DECLARE
	변수명 타입 ;
	변수명 타입 := 값; (초기화)
BEGIN
	PL/SQL문
END;

CHR(10) = 줄바꿈

--JDBC(Java DataBase Conectivity)

